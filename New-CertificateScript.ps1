#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributescite d on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#>>

<# 
.Synopsis
   Creates a PowerShell script containing an embedded certificate that can 
   easily be installed.
   
.DESCRIPTION
   This script makes generating and sharing certificates much simpler. 
   
   It can either take an existing certificate or generate a self-signed 
   certificate.
   
   When generating a certificate, all that is required is:
    - one or more domain names 
    - zero or more additional IpAddresses (it will attempt to resolve the DNS 
      names and add IPs for them, and localhost) 
    - password (can accept plaintext or SecureString [WHY? See Below!])  
    
   When using an existing certificate, the cert can come from a file, a path to 
   a cert, or a X509Certificate2 object.
    
   ===================
   NOTE ABOUT PASSWORD
   ===================
   I purposefully allowed plaintext passwords for two reasons.
      1. I hate having to play with SecureStrings when doing development. 
         It just makes things a pain. I'll mind my P's and Q's thank you very much.
         
      2. The current build of PowerShell on Nano doesn't have full support of 
         SecureString. This made it kinda difficult to actually use.
    
.EXAMPLE
    New-CertificateScript.ps1 -SelfSigned -DnsNames contoso.com, www.contoso.com -Password "MYPASSWORD" -OutputScript .\mycert.ps1 # create a self-signed certificate 
    
    Generated certificate: AC23D228856B5CDE28618467C652F216EABB6D1D
    Created Certificate Script : C:\mycert.ps1
    
    # check to see what's in the generated cert:
    PS C:\ >.\mycert.ps1 -showinfo
    This script has a certificate with thumbprint AC23D228856B5CDE28618467C652F216EABB6D1D
       - The private key for this certificate is available (password protected)
       - Supported Hosts (IPs/Hostnames)
          - DNS Name=contoso.com
          - DNS Name=www.contoso.com
          - IP Address=0000:0000:0000:0000:0000:0000:0000:0001
          - IP Address=127.0.0.1
          - IP Address=64.4.6.100
          - IP Address=65.55.39.10
       - Supported Common Names
          - contoso.com www.contoso.com - This is a Self-Signed certificate    
    
    # install it on a server:
    PS C:\ >.\mycert.ps1 -install -password "MYPASSWORD"
    
    # install it on a client:
    PS C:\ >.\mycert.ps1 -install 
    
    # remove the certificate from a client or server:
    PS C:\ >.\mycert.ps1 -remove 

.EXAMPLE
    New-CertificateScript.ps1 -Cert .\mycert.pfx -PfxPassword "pwd4pfx" -Password "MYPASSWORD" -OutputScript .\mycert.ps1 # create certificate script from a .pfx file

    Created Certificate Script : C:\myscript.ps1
    
    # check to see what's in the cert:
    PS C:\ > .\myscript.ps1 -showinfo
    This script has a certificate with thumbprint 0DE35C6536B30630F6B5CC6419B7EA0F3FCD50C2
   - The private key for this certificate is available (password protected)
   - Supported Hosts (IPs/Hostnames)
      - DNS Name=contoso
      - DNS Name=127.0.0.1
   - Supported Common Names
      - contoso

    # install it on a server:
    PS C:\ >.\mycert.ps1 -install -password "MYPASSWORD"
    
    # install it on a client:
    PS C:\ >.\mycert.ps1 -install 
    
    # remove the certificate from a client or server:
    PS C:\ >.\mycert.ps1 -remove 
#>

param( 
    [Parameter(ParameterSetName="selfsigned",Mandatory=$true)][Switch]$SelfSigned,
    [Parameter(ParameterSetName="selfsigned",Mandatory=$true)][String[]] $DnsNames, 
    [Parameter(ParameterSetName="selfsigned")][String[]] $IpAddresses,

    [Parameter(ParameterSetName="usecertfile",Mandatory=$true)]$certificate,
    [Parameter(ParameterSetName="usecertfile")]$PfxPassword,
    
    $Password,
    $OutputScript
) 
# embedded VCSJones.FiddlerCertGen assembly!
$CertGen = "

#<< param ( [Parameter(ParameterSetName="Install",Mandatory=$true)][Switch]$Install,[Parameter(ParameterSetName="Install")]$PasswordForPrivateKey,$SSLPort,[Parameter(ParameterSetName="Remove",Mandatory=$true)][Switch]$Remove,[Parameter(ParameterSetName="info",Mandatory=$true)][Switch]$ShowInfo)

#ensure that we are elevated.
If (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    write-host "You must run this command elevated"
    return
}

function Import-CertificateFile(
    [Parameter(Mandatory=$true)][System.Security.Cryptography.X509Certificates.X509Certificate2] $cert ,
    [Parameter(Mandatory=$true)][string] $StoreName,
    [switch] $LocalMachine,
    [switch] $CurrentUser,
    [string] $CertPassword
) {
    $StoreScope = "CurrentUser"
        
    if( $localMachine ) {
        $StoreScope = "LocalMachine"
    }
        
    if (Test-Path "cert:\$StoreScope\$StoreName") {
        try {
            $store = New-Object System.Security.Cryptography.X509Certificates.X509Store $StoreName, $StoreScope
            $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
            $store.Add($cert)
            $store.Dispose()
            Write-Host "Successfully added '$($cert.SubjectName.Name)' to 'cert:\$StoreScope\$StoreName\$($cert.Thumbprint)'."
        }
        catch {
            Write-Error ("Error adding '$($cert.SubjectName.Name)' to 'cert:\$StoreScope\$StoreName': $_ .") -ErrorAction:Continue
        }
    }
    else {
        Write-Warning "Certificate store '$StoreName' does not exist. Skipping..."
    }
}


function Get-SANs($c) {
    $SAN = ($c.extensions |? { $_.Oid.FriendlyName -eq "Subject Alternative Name"} |% {  (new-object -type System.Security.Cryptography.AsnEncodedData $_.Oid,$_.RawData).Format($true) } )
    $SANs = "$SAN".Split( "`n`r" ,[StringSplitOptions]::RemoveEmptyEntries ) 
    return $SANs
}

function Get-CNs($c) {
    $CNs= $c.SubjectName.Name.split(",") |? { $_ -match "CN=" } |% { $_.split("=" )[1] } 
    return $CNs
}


# init_pfx
# init_cert  

function Install-Certificate( $PasswordForPrivateKey, $SSLPort ) {

    # put in root so this system recognizes the certificate 
    # $c = [System.Security.Cryptography.X509Certificates.X509Certificate2] $cert
    # Import-CertificateFile $c "root" -localmachine  
    $name = "$env:temp\$((New-Guid).Guid).cer"        
    Set-Content -Path $name -Value $cert -Encoding Byte
    $c = Import-Certificate -FilePath $name -CertStoreLocation cert:\localmachine\root 
    erase -ea 0 $name 
    
    if( $pfx -and $PasswordForPrivateKey ) {
        # private key installation supoprted
        # $exportable =[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
        # $c = new-object -type System.Security.Cryptography.X509Certificates.X509Certificate2] -argumentlist $pfx,$PasswordForPrivateKey, $exportable 
        # Import-CertificateFile $c "my" -localmachine
        
        $name = "$env:temp\$((New-Guid).Guid).pfx"        
        Set-Content -Path $name -Value $pfx -Encoding Byte
        $c = Import-PfxCertificate -FilePath $name -CertStoreLocation cert:\localmachine\my -password (convertto-securestring -string $PasswordForPrivateKey -force -asplaintext) -exportable
        erase -ea 0 $name 
        
        $appid = "{$((New-Guid).Guid)}"
        
        # Register certs for SSL too..
        if( $SSLPort ) {
            $certhash = "certhash=$($c.Thumbprint)"
            Get-SANs $c |% { 
                $type,$value = "$_".split("=")
                if( $type -eq "DNS Name" ) {
                    $bind = "hostnameport=$($value):$SSLPort"
                } 
                if( $type -eq "IP Address" ) {
                    if( $value.indexOf(":") -gt -1 ) {
                        $bind = "ipport=[$($value)]:$SSLPort"
                    } else {
                        $bind = "ipport=$($value):$SSLPort"
                    }
               }
                $null = netsh http delete sslcert $bind
                $shh = netsh http add sslcert $bind $certhash appid=$appid certstorename=MY
                if( $shh -match "successfully" ) {
                    write-host "$shh ($($c.Thumbprint)) to $bind"
                } else {
                    write-warning "netsh http add sslcert $bind $certhash appid=$appid certstorename=MY `n$shh"
                }
            }
            
            $CNs = Get-CNs $c |% {
                $value = "$_"
                if( !( $value -match "\s+") ) {
                    $bind = "hostnameport=$($value):$SSLPort"
                    $null = netsh http delete sslcert $bind
                    $shh = netsh http add sslcert $bind $certhash appid=$appid certstorename=MY
                    if( $shh -match "successfully" ) {
                        write-host "$shh ($($c.Thumbprint)) to $bind"
                    } else {
                        write-warning "netsh http add sslcert $bind $certhash appid=$appid certstorename=MY `n$shh"
                    }
                }
            }
        }
    } 

}

function remove-cert( $path ) {
    if( test-path $path ) {
        write-host "Removing certificate at $path"
        erase  $path -ea 0 
        if( test-path $path ) {
            write-error "Failed to remove certificate at $path"
        }
    }
}

function go($Install,$PasswordForPrivateKey, $Remove,$ShowInfo, $SSLPort ) {
    if( $ShowInfo ) {
        $c = [System.Security.Cryptography.X509Certificates.X509Certificate2] $cert
        Write-host "This script has a certificate with thumbprint $($c.Thumbprint)"
        if( $pfx ) {
            Write-host "   - The private key for this certificate is available (password protected)"
        } else {
            Write-host "   - The private key for this certificate is not available"
        }
        
        $SANs = Get-SANs $c 
        if( $SANs  ) {
            Write-Host "   - Supported Hosts (IPs/Hostnames)"
            $SANs  |% { Write-Host "      - $_" }
        }
        
        $CNs= Get-CNs $c 
        if( $CNs  ) {
            Write-Host "   - Supported Common Names"
            $CNs |% { Write-Host "      - $_" }
        }
        
        return
    }
    if( $install ) {
        if( $PasswordForPrivateKey )  {
            if( $pfx ) {
                Install-Certificate $PasswordForPrivateKey $SSLPort
            } else {
                write-error "This script does not contain a certificate with a private key."
                return;
            }
        } else {
            Install-Certificate 
        }
    } 
    
    if( $Remove ) {
        $c = [System.Security.Cryptography.X509Certificates.X509Certificate2] $cert
        
      
        
        if( $SSLPort ) {
            $certhash = "certhash=$($c.Thumbprint)"
            Get-SANs $c |% { 
                $type,$value = "$_".split("=")
                if( $type -eq "DNS Name" ) {
                    $bind = "hostnameport=$($value):$SSLPort"
                } 
                if( $type -eq "IP Address" ) {
                    if( $value.indexOf(":") -gt -1 ) {
                        $bind = "ipport=[$($value)]:$SSLPort"
                    } else {
                        $bind = "ipport=$($value):$SSLPort"
                    }
                }
                $shh = netsh http delete sslcert $bind
                if( $shh -match "successfully" ) {
                    write-host "$($shh.Trim()) from $bind"
                }
            }
            
            $CNs = Get-CNs $c |% {
                $value = "$_"
                if( !( $value -match "\s+") ) {
                    $bind = "hostnameport=$($value):$SSLPort"
                    $shh = netsh http delete sslcert $bind
                    if( $shh -match "successfully" ) {
                        write-host "$($shh.Trim()) from $bind"
                    }
                }
            }
        }
        
        remove-cert "cert:\localmachine\my\$($c.Thumbprint)" 
        remove-cert "cert:\localmachine\root\$($c.Thumbprint)" 
        remove-cert "cert:\currentuser\my\$($c.Thumbprint)" 
        remove-cert "cert:\currentuser\root\$($c.Thumbprint)" 
        
    }
}
#>>
function Delete-TryHarder( [String]$filename ) {
    if( (test-path $filename ) ) {
        $filename = resolve-path $filename
        erase $filename -ea 0 -force 

        # did it erase? 
        if( (test-path $filename ) ) {
            
            # try to move it to the temp folder first.
            $newfilename = "$env:tmp\delete-on-reboot-$((New-Guid).Guid)"
            move $filename $newfilename -ea 0 -force 
            if( (test-path $newfilename ) ) {
                $filename = $newfilename
            }
        
            # use Kernel32.MoveFileEx
            if( ! $script:kernel32  ) {
                $script:kernel32 = Add-Type -Name MoveFileUtils -MemberDefinition '[DllImport("kernel32.dll", SetLastError=true, CharSet=CharSet.Auto)] public static extern bool MoveFileEx(string lpExistingFileName, string lpNewFileName, int dwFlags);' -PassThru 
            }
            
            # delete on next reboot.
            $script:kernel32::MoveFileEx($filename, $null, 0x00000004) 
            
            write-debug "'$filename' will be deleted on reboot"
        }
    }
}

function Generate-Script([System.Security.Cryptography.X509Certificates.X509Certificate2] $cert, $password ) {
    if( -not $OutputScript ) {
        $OutputScript = ".\$($cert.Thumbprint)-Certificate.ps1"
    }
    
    # use this script as a template
    $txt = Get-Content -raw $PSCommandPath 
    $txt = $txt -replace "(?ms)\#\>\>.*?\#\<\<",""
    
    # add cert with private key to script
    if( $password ) {
        if( !$cert.HasPrivateKey  ) {
            write-error "Password specfied, but certificate doesn't have a private key."
            return;
        }
        $pfx = [System.Convert]::ToBase64String( $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12, $Password ) )
        $txt = $txt -replace "\# init_pfx","`$pfx =  [System.Convert]::FromBase64String('$pfx')"
    }
    
    # add cert without private key to script 
    $cer = [System.Convert]::ToBase64String( $cert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert ) )
    $txt = $txt -replace "\# init_cert","`$cert =  [System.Convert]::FromBase64String('$cer')"
    
    # save new script
    set-Content -path $OutputScript -value $txt
    write-host "Created Certificate Script : $(resolve-path $OutputScript)"
}

function Generate-SelfSignedCertificate([Parameter(Mandatory=$true)][String[]] $DnsNames, $Password ,[String[]] $IpAddresses )  {
    # ensure LocalHost is added
    # and any that are specified by the user
    $IpAddresses = @("127.0.0.1", "::1") + $IpAddresses
    
    # look up addresses for domain names
    $Addresses += ( $DnsNames |% {[System.Net.Dns]::GetHostAddresses($_)} )  
    
    #  create IP address objects
    $Addresses += $IpAddresses |? {$_ }|% {  [System.Net.IpAddress]::Parse($_) } 

    # remove duplicates 
    $Addresses = $Addresses | sort -Property IpAddressToString | select-object -Unique

    # generate certificates
    $key = [VCSJones.FiddlerCertGen.PrivateKey]::CreateNew(
            [VCSJones.FiddlerCertGen.KeyProviders]::CNG,
            "Self-Signed-Key;",
            [VCSJones.FiddlerCertGen.Algorithm]::RSA,
            [VCSJones.FiddlerCertGen.KeyUsage]::KeyExchange,
            2048,
            $true)
            
    # $key.KeySpec = [VCSJones.FiddlerCertGen.Interop.KeySpec]::AT_KEYEXCHANGE

    $gen = new-object -type VCSJones.FiddlerCertGen.CertificateGenerator
    
    $cert = $gen.GenerateSelfSignedCertificate(
            $key,
            ( new-object -type  System.Security.Cryptography.X509Certificates.X500DistinguishedName "CN=$($dnsNames[0]), O=FOR ENCRYPTION ONLY-NO TRUST IMPLIED, OU=Created by script" ),
            [VCSJones.FiddlerCertGen.HashAlgorithm]::SHA1,
            $DnsNames, 
            $Addresses);
    # drop the key
    $null = $key.Dispose()
    
    if( $cert ) {    
        Write-host "Generated certificate: $($cert.Thumbprint)"
        Generate-Script -cert $cert  -password $password
    } else {
        write-error "Failed to generate self-signed certificate."
    }
}

function Load-Assembly([string]$base64Assembly) {
    # convert to binary
    $assembly = [System.Convert]::FromBase64String($base64Assembly)
    
    # generate temporary filename
    $name = "$env:temp\$((New-Guid).Guid).dll"
    
    # save file to temporary location
    Set-Content -Path $name -Value $assembly -Encoding Byte

    # load assembly
    Add-Type -Path $name

    # Clean up assembly
    $null = Delete-TryHarder $name 
    # [System.Convert]::ToBase64String(  [System.IO.File]::ReadAllBytes(".\VCSJones.FiddlerCertGen.dll") )
}
# load the cert gen assembly.
Load-Assembly($CertGen)

if( $SelfSigned ) {
    # we're creating a self-signed certificate 
    if( $Password ) {
        Generate-SelfSignedCertificate $DnsNames $Password $IpAddresses 
    } else {
        write-error "You must specify a password when generating a self-signed password"
    }
} else {
    # we're going to use an existing certificate that the user has.
    if( $PfxPassword ) {
        $exportable =[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
        $cert = new-object -type  System.Security.Cryptography.X509Certificates.X509Certificate2 -argumentlist $certificate, $PfxPassword, $exportable -ea 0
    } else {
        if( $certificate  -is [System.Security.Cryptography.X509Certificates.X509Certificate2] ) {
            $cert = $certificate 
        } else {
            $p = resolve-path $certificate 
            if( $p ) {
                if ( "Cert" -eq $p.Drive ) {
                    $cert = dir $p.path 
                } else {
                    $cert = new-object -type  System.Security.Cryptography.X509Certificates.X509Certificate2 -argumentlist $certificate -ea 0
                }
            }
        }
        
        
    }
    if( $cert )  {
        Generate-Script -cert $cert -password $password
    } else {
        write-error "Unable to load certificate from $certificate"
    }
}

#<< go $Install $PasswordForPrivateKey $Remove $ShowInfo $SSLPort
    